from flask import Flask, render_template, request, jsonify, session
import json
import logging
import os
import datetime
import time
import re
import threading
from dotenv import load_dotenv
import telebot
from telebot import types
import urllib.parse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7611972902:AAGn_OlH9cDqtr1RT95VTzPclC_cj2rAloU')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '6951859094')
SECRET_KEY = os.getenv('SECRET_KEY', 'assenizator-nn-secret-key-2025')

# –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å (–≤–∞—à –∞–¥—Ä–µ—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –º–∞—Ä—à—Ä—É—Ç)
BASE_ADDRESS = "—É–ª. –ú–æ–Ω–∞—Å—Ç—ã—Ä–∫–∞, 15, –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª., –†–æ—Å—Å–∏—è, 603016"
# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–¥–ª—è –Ø–Ω–¥–µ–∫—Å –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞)
BASE_COORDINATES = "56.27569,43.88983"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
ORDERS_FILE = 'orders.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__, static_folder='static')
app.secret_key = SECRET_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
orders = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

def load_orders():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global orders
    if os.path.exists(ORDERS_FILE):
        try:
            with open(ORDERS_FILE, 'r', encoding='utf-8') as file:
                orders = json.load(file)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            orders = {}
    else:
        orders = {}

def save_orders():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(ORDERS_FILE, 'w', encoding='utf-8') as file:
            json.dump(orders, file, ensure_ascii=False, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

def generate_order_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–∫–∞–∑–∞"""
    now = datetime.datetime.now()
    date_part = now.strftime('%Y%m%d')
    
    # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    max_num = 0
    for order_id in orders.keys():
        if order_id.startswith(date_part):
            try:
                num = int(order_id.split('-')[1])
                if num > max_num:
                    max_num = num
            except:
                pass
    
    return f"{date_part}-{max_num + 1}"

def get_navigation_links(address):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –∞–¥—Ä–µ—Å–∞
    if not address or len(address.strip()) < 5:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        return {
            "yandex_maps": f"https://yandex.ru/maps/?mode=search&text={urllib.parse.quote(address)}",
            "google_maps": f"https://www.google.com/maps/search/?api=1&query={urllib.parse.quote(address)}"
        }
    
    encoded_address = urllib.parse.quote(address)
    
    # –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∞–¥—Ä–µ—Å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    yandex_maps = f"https://yandex.ru/maps/?mode=routes&rtext={BASE_COORDINATES}~{encoded_address}&rtt=auto"
    google_maps = f"https://www.google.com/maps/dir/?api=1&origin={urllib.parse.quote(BASE_ADDRESS)}&destination={encoded_address}&travelmode=driving"
    
    return {
        "yandex_maps": yandex_maps,  # –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã (–≤–µ–±)
        "google_maps": google_maps,  # Google Maps (–≤–µ–±)
    }

def format_order_message(order_id, order):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    message = f"""
<b>üÜï –ó–ê–ö–ê–ó #{order_id}</b>

<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {order['name']}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order['phone']}
<b>üìç –ê–¥—Ä–µ—Å:</b> {order.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
<b>üöö –£—Å–ª—É–≥–∞:</b> {order.get('service_type', '–û—Ç–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞')}
<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.get('comment', '–ù–µ—Ç')}
<b>‚è∞ –°–æ–∑–¥–∞–Ω:</b> {order.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
    return message

def get_order_keyboard(order_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º —Å –ø—Ä—è–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    markup.add(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{order_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{order_id}")
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if order_id in orders:
        order = orders[order_id]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–≤–æ–Ω–∫–∞
        if 'phone' in order:
            # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏
            clean_phone = re.sub(r'[^\d+]', '', order['phone'])
            if not clean_phone.startswith('+'):
                clean_phone = '+' + clean_phone
                
            markup.add(
                types.InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"call_{order_id}")
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if 'address' in order and order['address'] and len(order['address'].strip()) >= 5:
            try:
                nav_links = get_navigation_links(order['address'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                nav_row = [
                    types.InlineKeyboardButton("üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", url=nav_links["yandex_maps"]),
                    types.InlineKeyboardButton("üåê Google Maps", url=nav_links["google_maps"])
                ]
                markup.add(*nav_row)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
    
    return markup

def safe_send_telegram_message(order_id, order):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ—Ç–∫–∞—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        message_text = format_order_message(order_id, order)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = get_order_keyboard(order_id)
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ 1: –ø–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)...")
            sent_msg = bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message_text,
                parse_mode='HTML',
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            logger.info(f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram, message_id: {sent_msg.message_id}")
            return True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ 1): {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å HTML, –Ω–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ 2: –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)...")
                sent_msg = bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, message_id: {sent_msg.message_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                simple_keyboard = types.InlineKeyboardMarkup(row_width=2)
                simple_keyboard.add(
                    types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{order_id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{order_id}")
                )
                bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
                    reply_markup=simple_keyboard
                )
                return True
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ 2): {e}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ 3: –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)...")
                    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML —Ç–µ–≥–æ–≤
                    plain_message = f"""
–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}

–ö–ª–∏–µ–Ω—Ç: {order['name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}
–ê–¥—Ä–µ—Å: {order.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–£—Å–ª—É–≥–∞: {order.get('service_type', '–û—Ç–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞')}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment', '–ù–µ—Ç')}
–°–æ–∑–¥–∞–Ω: {order.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
                    sent_msg = bot.send_message(
                        chat_id=TELEGRAM_CHAT_ID,
                        text=plain_message,
                        disable_web_page_preview=True
                    )
                    logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, message_id: {sent_msg.message_id}")
                    return True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –¥–∞–∂–µ –≤ plain text: {e}")
                    return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ Telegram: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ "–ê—Å—Å–µ–Ω–∏–∑–∞—Ç–æ—Ä –ù–ù".
–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/orders - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
"""
    
    bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')

@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/orders - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã

<b>–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –í—ã —É–≤–∏–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
‚Ä¢ –° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º –º–æ–∂–Ω–æ:
  - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
  - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  - –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–≤–æ–Ω–∏–ª–∫–∞)
 

<b>–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!</b>
"""
    
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

@bot.message_handler(commands=['orders'])
def handle_orders(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ completed –∏–ª–∏ cancelled)
    active_orders = {order_id: order for order_id, order in orders.items() 
                   if not order.get('status') in ['completed', 'cancelled']}
    
    if not active_orders:
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–∫–∞–∑–µ
    bot.send_message(message.chat.id, f"<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã ({len(active_orders)}):</b>", parse_mode='HTML')
    
    for order_id, order in active_orders.items():
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_message = format_order_message(order_id, order)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = get_order_keyboard(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            sent_msg = bot.send_message(
                chat_id=message.chat.id,
                text=order_message,
                parse_mode='HTML',
                reply_markup=keyboard,
                disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Å—Å—ã–ª–æ–∫
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            plain_message = f"""
–ó–ê–ö–ê–ó #{order_id}

–ö–ª–∏–µ–Ω—Ç: {order['name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}
–ê–¥—Ä–µ—Å: {order.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
–£—Å–ª—É–≥–∞: {order.get('service_type', '–û—Ç–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞')}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment', '–ù–µ—Ç')}
–°–æ–∑–¥–∞–Ω: {order.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
            bot.send_message(
                chat_id=message.chat.id,
                text=plain_message,
                disable_web_page_preview=True
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    callback_data = call.data
    
    try:
        if callback_data.startswith("complete_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            order_id = callback_data.replace("complete_", "")
            
            if order_id in orders:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
                orders[order_id]['status'] = 'completed'
                orders[order_id]['completed_at'] = datetime.datetime.now().strftime('%d.%m.%Y %H:%M')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                save_orders()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
                try:
                    updated_message = f"{format_order_message(order_id, orders[order_id])}\n\n<b>‚úÖ –í–´–ü–û–õ–ù–ï–ù</b>"
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=updated_message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        elif callback_data.startswith("cancel_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            order_id = callback_data.replace("cancel_", "")
            
            if order_id in orders:
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
                orders[order_id]['status'] = 'cancelled'
                orders[order_id]['cancelled_at'] = datetime.datetime.now().strftime('%d.%m.%Y %H:%M')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                save_orders()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
                try:
                    updated_message = f"{format_order_message(order_id, orders[order_id])}\n\n<b>‚ùå –û–¢–ú–ï–ù–ï–ù</b>"
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=updated_message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        elif callback_data.startswith("call_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
            order_id = callback_data.replace("call_", "")
            
            if order_id in orders and 'phone' in orders[order_id]:
                phone = orders[order_id]['phone']
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_phone = re.sub(r'[^\d+]', '', phone)
                if not clean_phone.startswith('+'):
                    clean_phone = '+' + clean_phone
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                bot.answer_callback_query(
                    call.id, 
                    f"–û—Ç–∫—Ä—ã–≤–∞—é –∑–≤–æ–Ω–∏–ª–∫—É...",
                    show_alert=False
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                # –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ —Å —É–∂–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
                bot.send_message(
                    call.message.chat.id,
                    f'<a href="tel:{clean_phone}">–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É: {phone}</a>',
                    parse_mode='HTML'
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Flask –º–∞—Ä—à—Ä—É—Ç—ã

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –Ω–∞—à –ª–µ–Ω–¥–∏–Ω–≥"""
    return render_template('index.html')

@app.route('/submit-form', methods=['POST'])
def submit_form():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        form_id = request.form.get('form_id', '')
        session_id = session.get('last_form_id', '')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, form_id: {form_id}")
        
        if form_id and form_id == session_id:
            # –≠—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã: {form_id}")
            return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."})
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.form.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = request.form.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        address = request.form.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        service_type = request.form.get('service_type', '–û—Ç–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞')
        date_time = request.form.get('date_time', '')
        comment = request.form.get('comment', '')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –∏–º—è: {name}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}, –∞–¥—Ä–µ—Å: {address}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = generate_order_id()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
        order = {
            'name': name,
            'phone': phone,
            'address': address,
            'service_type': service_type,
            'date_time': date_time,
            'comment': comment,
            'created_at': datetime.datetime.now().strftime('%d.%m.%Y %H:%M'),
            'status': 'new'  # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫
        orders[order_id] = order
        logger.info(f"–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
        save_orders()
        logger.info(f"–ó–∞–∫–∞–∑ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ä–º—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        session['last_form_id'] = form_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = safe_send_telegram_message(order_id, order)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        return jsonify({"success": True, "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"})
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {str(e)}")
        return jsonify({"success": False, "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º."})

@app.errorhandler(404)
def page_not_found(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 404"""
    return render_template('index.html'), 404

@app.errorhandler(500)
def server_error(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ 500"""
    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    return jsonify({"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞

def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    load_orders()
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        bot.remove_webhook()
        logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    time.sleep(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Telegram...")
        me = bot.get_me()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram. –ò–º—è –±–æ—Ç–∞: {me.first_name}, username: @{me.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API Telegram: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def polling_worker():
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
        
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ polling")
                bot.polling(none_stop=True, timeout=60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ polling: {e}")
                time.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ polling
    polling_thread = threading.Thread(target=polling_worker, daemon=True)
    polling_thread.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

if __name__ == '__main__':
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        init_data()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        start_bot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")